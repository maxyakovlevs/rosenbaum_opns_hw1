to_minimize,
control=list(maxit=100)
)
},
.parallel = TRUE
)
#Not sure
values <- ldply(opt_sol, function(l) data.frame(value = l$value, par = rbind(l$par)))
min_values <- filter(values, value == min(value))
values_selected <- select(min_values, -value)
optimal_locations <- matrix(values_selected, nc = 2)
return(optimal_locations)
}
find_best_location <- function(num.sites, assemblers, competetors, union.rate.fn, beta, num.tries){
#estimating plant variable costs
cri_bar <- function(assemblers, suppliers){
euclidean_distance <- sum(sqrt((assemblers[1] - suppliers[1])^2 + (assemblers[2] - suppliers[2])^2))
union_rate <- union.rate.fn(suppliers[1], suppliers[2])
cri_bar <- beta[[1]] * euclidean_distance + beta[[2]] * union_rate
return(cri_bar)
}
# define cost function using Equation 14 and the structure on the expectation of N
E_N <- function(assemblers, suppliers){
lse <- t(data.frame("lse" = 1:nrow(suppliers)))
for (i in 1:nrow(suppliers)){
lse[i] <- -1*cri_bar(assemblers, suppliers[i,])
}
LSE <- (-1)*log(sum(exp(unlist(lse))))
return(LSE)
}
to_minimize <- function(suppliers){
suppliers_loc <- matrix(suppliers, nc = 2)
allsuppliers_loc <- rbind(suppliers_loc, as.matrix(competetors))
allsuppliers_loc
min <- t(data.frame("min" = 1:nrow(assemblers)))
for (row in 1:nrow(assemblers)){
min[row] <- E_N(assemblers[row,], allsuppliers_loc)
}
min_sum <- sum(min)
return(min_sum)
}
optimal_locations <- seq(num.tries) %>%
llply(function(l){
optim(
runif(2 * num.sites),
to_minimize,
control=list(maxit=10)
)
},
.parallel = TRUE
)
#Not sure
values <- ldply(opt_sol, function(l) data.frame(value = l$value, par = rbind(l$par)))
min_values <- filter(values, value == min(value))
values_selected <- select(min_values, -value)
optimal_locations <- matrix(values_selected, nc = 2)
return(optimal_locations)
}
find_best_location(
num.sites = 6,
assemblers = readRDS(paste0(var_save, 'assembly.rds')),
competetors = readRDS(paste0(var_save, 'competetor.rds')),
union.rate.fn = readRDS(paste0(var_save, 'unionizationRate.rds')),
beta = readRDS(paste0(var_save, 'costParameters.rds')),
num.tries = 12
) %>%
saveRDS(paste0(var_save, 'solution1.rds'))
find_best_location <- function(num.sites, assemblers, competetors, union.rate.fn, beta, num.tries){
#estimating plant variable costs
cri_bar <- function(assemblers, suppliers){
euclidean_distance <- sum(sqrt((assemblers[1] - suppliers[1])^2 + (assemblers[2] - suppliers[2])^2))
union_rate <- union.rate.fn(suppliers[1], suppliers[2])
cri_bar <- beta[[1]] * euclidean_distance + beta[[2]] * union_rate
return(cri_bar)
}
# define cost function using Equation 14 and the structure on the expectation of N
E_N <- function(assemblers, suppliers){
lse <- t(data.frame("lse" = 1:nrow(suppliers)))
for (i in 1:nrow(suppliers)){
lse[i] <- -1*cri_bar(assemblers, suppliers[i,])
}
LSE <- (-1)*log(sum(exp(unlist(lse))))
return(LSE)
}
to_minimize <- function(suppliers){
suppliers_loc <- matrix(suppliers, nc = 2)
allsuppliers_loc <- rbind(suppliers_loc, as.matrix(competetors))
allsuppliers_loc
min <- t(data.frame("min" = 1:nrow(assemblers)))
for (row in 1:nrow(assemblers)){
min[row] <- E_N(assemblers[row,], allsuppliers_loc)
}
min_sum <- sum(min)
return(min_sum)
}
optimal_locations <- seq(num.tries) %>%
llply(function(l){
optim(
runif(2 * num.sites),
to_minimize,
control=list(maxit=10)
)
},
.parallel = TRUE
)
#Not sure
values <- ldply(optimal_locations, function(l) data.frame(value = l$value, par = rbind(l$par)))
min_values <- filter(values, value == min(value))
values_selected <- select(min_values, -value)
optimal_locations <- matrix(values_selected, nc = 2)
return(optimal_locations)
}
find_best_location(
num.sites = 6,
assemblers = readRDS(paste0(var_save, 'assembly.rds')),
competetors = readRDS(paste0(var_save, 'competetor.rds')),
union.rate.fn = readRDS(paste0(var_save, 'unionizationRate.rds')),
beta = readRDS(paste0(var_save, 'costParameters.rds')),
num.tries = 12
) %>%
saveRDS(paste0(var_save, 'solution1.rds'))
solution1
values <- ldply(optimal_locations, function(l) data.frame(value = l$value, par = rbind(l$par)))
min_values <- filter(values, value == min(value))
values_selected <- select(min_values, -value)
optimal_locations1 <- matrix(values_selected, nc = 2)
find_best_location <- function(num.sites, assemblers, competetors, union.rate.fn, beta, num.tries){
#estimating plant variable costs
cri_bar <- function(assemblers, suppliers){
euclidean_distance <- sum(sqrt((assemblers[1] - suppliers[1])^2 + (assemblers[2] - suppliers[2])^2))
union_rate <- union.rate.fn(suppliers[1], suppliers[2])
cri_bar <- beta[[1]] * euclidean_distance + beta[[2]] * union_rate
return(cri_bar)
}
# define cost function using Equation 14 and the structure on the expectation of N
E_N <- function(assemblers, suppliers){
lse <- t(data.frame("lse" = 1:nrow(suppliers)))
for (i in 1:nrow(suppliers)){
lse[i] <- -1*cri_bar(assemblers, suppliers[i,])
}
LSE <- (-1)*log(sum(exp(unlist(lse))))
return(LSE)
}
to_minimize <- function(suppliers){
suppliers_loc <- matrix(suppliers, nc = 2)
allsuppliers_loc <- rbind(suppliers_loc, as.matrix(competetors))
allsuppliers_loc
min <- t(data.frame("min" = 1:nrow(assemblers)))
for (row in 1:nrow(assemblers)){
min[row] <- E_N(assemblers[row,], allsuppliers_loc)
}
min_sum <- sum(min)
return(min_sum)
}
optimal_locations <- seq(num.tries) %>%
llply(function(l){
optim(
runif(2 * num.sites),
to_minimize,
control=list(maxit=10)
)
},
.parallel = TRUE
)
#Not sure
values <- ldply(optimal_locations, function(l) data.frame(value = l$value, par = rbind(l$par)))
min_values <- filter(values, value == min(value))
values_selected <- select(min_values, -value)
optimal_locations1 <- matrix(values_selected, nc = 2)
return(optimal_locations1)
}
find_best_location(
num.sites = 6,
assemblers = readRDS(paste0(var_save, 'assembly.rds')),
competetors = readRDS(paste0(var_save, 'competetor.rds')),
union.rate.fn = readRDS(paste0(var_save, 'unionizationRate.rds')),
beta = readRDS(paste0(var_save, 'costParameters.rds')),
num.tries = 2
) %>%
saveRDS(paste0(var_save, 'solution1.rds'))
solution1
find_best_location <- function(num.sites, assemblers, competetors, union.rate.fn, beta, num.tries){
#estimating plant variable costs
cri_bar <- function(assemblers, suppliers){
euclidean_distance <- sum(sqrt((assemblers[1] - suppliers[1])^2 + (assemblers[2] - suppliers[2])^2))
union_rate <- union.rate.fn(suppliers[1], suppliers[2])
cri_bar <- beta[[1]] * euclidean_distance + beta[[2]] * union_rate
return(cri_bar)
}
# define cost function using Equation 14 and the structure on the expectation of N
E_N <- function(assemblers, suppliers){
lse <- t(data.frame("lse" = 1:nrow(suppliers)))
for (i in 1:nrow(suppliers)){
lse[i] <- -1*cri_bar(assemblers, suppliers[i,])
}
LSE <- (-1)*log(sum(exp(unlist(lse))))
return(LSE)
}
to_minimize <- function(suppliers){
suppliers_loc <- matrix(suppliers, nc = 2)
allsuppliers_loc <- rbind(suppliers_loc, as.matrix(competetors))
allsuppliers_loc
min <- t(data.frame("min" = 1:nrow(assemblers)))
for (row in 1:nrow(assemblers)){
min[row] <- E_N(assemblers[row,], allsuppliers_loc)
}
min_sum <- sum(min)
return(min_sum)
}
optimal_locations <- seq(num.tries) %>%
llply(function(l){
optim(
runif(2 * num.sites),
to_minimize,
control=list(maxit=10)
)
},
.parallel = TRUE
)
#Not sure
values <- ldply(optimal_locations, function(l) data.frame(value = l$value, par = rbind(l$par)))
min_values <- filter(values, value == min(value))
values_selected <- select(min_values, -value)
optimal_locations1 <- matrix(values_selected, nc = 2)
optimal_locations1
return(optimal_locations1)
}
my.library <- 'C:/Users/yakov/Documents/R/win-library/3.6'
.libPaths(my.library)
library('tidyverse')
c('reshape2', 'stringr', 'magrittr', 'plyr') %>%
walk(~library(., character.only=TRUE))
dir('modules') %>%
walk(~source(paste('./modules/', ., sep="")))
var_save <- 'variables/'
registerDoParallel(cores=28)
make_data <- function(assembly.count, competetor.count, distance, union){
data_frame(
x = runif(assembly.count),
y = runif(assembly.count)
) %>%
saveRDS(paste0(var_save, 'assembly.rds'))
data_frame(
x = runif(competetor.count),
y = runif(competetor.count)
) %>%
saveRDS(paste0(var_save, 'competetor.rds'))
data.frame(
distance = distance,
union = union
) %>%
saveRDS(paste0(var_save, 'costParameters.rds'))
{function(x, y) (x-1/2)^2+(y/4)^2} %>%
saveRDS(paste0(var_save, 'unionizationRate.rds'))
}
source('code/header.R')
make_data(
assembly.count = 12,
competetor.count = 4,
distance = 10,
union = 2
)
find_best_location(
num.sites = 6,
assemblers = readRDS(paste0(var_save, 'assembly.rds')),
competetors = readRDS(paste0(var_save, 'competetor.rds')),
union.rate.fn = readRDS(paste0(var_save, 'unionizationRate.rds')),
beta = readRDS(paste0(var_save, 'costParameters.rds')),
num.tries = 2
) %>%
saveRDS(paste0(var_save, 'solution1.rds'))
solution1
View(solution1)
tail(solution1,n=1)
tail<-tail(solution1,n=1)
tail
tail$par
View(tail)
tail[1]
tail[-c('[[1]]','counts','convergence',message)]
values <- ldply(optimal_locations, function(l) data.frame(value = l$value, par = rbind(l$par)))
values <- ldply(solution1, function(l) data.frame(value = l$value, par = rbind(l$par)))
values
min_values <- filter(values, value == min(value))
min_values
values_selected <- select(min_values, -value)
values_selected
optimal_locations1 <- matrix(values_selected, nc = 2)
optimal_locations1
find_best_location <- function(num.sites, assemblers, competetors, union.rate.fn, beta, num.tries){
#estimating plant variable costs
cri_bar <- function(assemblers, suppliers){
euclidean_distance <- sum(sqrt((assemblers[1] - suppliers[1])^2 + (assemblers[2] - suppliers[2])^2))
union_rate <- union.rate.fn(suppliers[1], suppliers[2])
cri_bar <- beta[[1]] * euclidean_distance + beta[[2]] * union_rate
return(cri_bar)
}
# define cost function using Equation 14 and the structure on the expectation of N
E_N <- function(assemblers, suppliers){
lse <- t(data.frame("lse" = 1:nrow(suppliers)))
for (i in 1:nrow(suppliers)){
lse[i] <- -1*cri_bar(assemblers, suppliers[i,])
}
LSE <- (-1)*log(sum(exp(unlist(lse))))
return(LSE)
}
to_minimize <- function(suppliers){
suppliers_loc <- matrix(suppliers, nc = 2)
allsuppliers_loc <- rbind(suppliers_loc, as.matrix(competetors))
allsuppliers_loc
min <- t(data.frame("min" = 1:nrow(assemblers)))
for (row in 1:nrow(assemblers)){
min[row] <- E_N(assemblers[row,], allsuppliers_loc)
}
min_sum <- sum(min)
return(min_sum)
}
optimal_locations <- seq(num.tries) %>%
llply(function(l){
optim(
runif(2 * num.sites),
to_minimize,
control=list(maxit=1000)
)
},
.parallel = FALSE
)
#Not sure
values <- ldply(optimal_locations, function(l) data.frame(value = l$value, par = rbind(l$par)))
min_values <- filter(values, value == min(value))
values_selected <- select(min_values, -value)
optimal_locations1 <- matrix(values_selected, nc = 2)
optimal_locations1
return(optimal_locations1)
}
source('code/header.R')
make_data(
assembly.count = 12,
competetor.count = 4,
distance = 10,
union = 2
)
find_best_location(
num.sites = 1,
assemblers = readRDS(paste0(var_save, 'assembly.rds')),
competetors = readRDS(paste0(var_save, 'competetor.rds')),
union.rate.fn = readRDS(paste0(var_save, 'unionizationRate.rds')),
beta = readRDS(paste0(var_save, 'costParameters.rds')),
num.tries = 2
) %>%
saveRDS(paste0(var_save, 'solution1.rds'))
solution1
find_best_location <- function(num.sites, assemblers, competetors, union.rate.fn, beta, num.tries){
# Obtain the location parameter
C_bar_tri <- function(assemblers, suppliers){
euc_dist <- sum(sqrt((assemblers[1] - suppliers[1])^2 + (assemblers[2] - suppliers[2])^2))
union_rate <- union.rate.fn(suppliers[1], suppliers[2])
c_bar_tri <- beta[[1]] * euc_dist + beta[[2]] * union_rate
return(c_bar_tri)
}
# Find LSE based on the closed form we derived from Part I
Exp_N <- function(assemblers, suppliers){
lse <- t(data.frame("lse" = 1:nrow(suppliers)))
for (i in 1:nrow(suppliers)){
lse[i] <- -1*C_bar_tri(assemblers, suppliers[i,])
}
LSE <- -1*log(sum(exp(unlist(lse))))
return(LSE)
}
Minimum <- function(suppliers){
df_sup_input <- matrix(suppliers, nc = 2)
df_sup_total <- rbind(df_sup_input, as.matrix(competetors))
min <- t(data.frame("min" = 1:nrow(assemblers)))
for (a in 1:nrow(assemblers)){
min[a] <- Exp_N(assemblers[a,], df_sup_total)
}
min_sum <- sum(min)
return(min_sum)
}
opt_sol <- seq(num.tries) %>%
llply(function(l){
optim(
runif(2 * num.sites),
Minimum,
control=list(maxit=10000)
)
},
.parallel = TRUE
)
# Not sure
values <- ldply(opt_sol, function(l) data.frame(value = l$value, par = rbind(l$par)))
min_values <- filter(values, value == min(value))
values_selected <- select(min_values, -value)
nam_choi <- matrix(values_selected, nc = 2)
return(nam_choi)
}
fbl(
num.sites = 1,
assemblers = readRDS(paste0(var_save, 'assembly.rds')),
competetors = readRDS(paste0(var_save, 'competetor.rds')),
union.rate.fn = readRDS(paste0(var_save, 'unionizationRate.rds')),
beta = readRDS(paste0(var_save, 'costParameters.rds')),
num.tries = 2
) %>%
saveRDS(paste0(var_save, 'solution1.rds'))
my.library <- 'C:/Users/yakov/Documents/R/win-library/3.6'
.libPaths(my.library)
library('tidyverse')
c('reshape2', 'stringr', 'magrittr', 'plyr') %>%
walk(~library(., character.only=TRUE))
dir('modules') %>%
walk(~source(paste('./modules/', ., sep="")))
var_save <- 'variables/'
registerDoParallel(cores=28)
fbl(
num.sites = 1,
assemblers = readRDS(paste0(var_save, 'assembly.rds')),
competetors = readRDS(paste0(var_save, 'competetor.rds')),
union.rate.fn = readRDS(paste0(var_save, 'unionizationRate.rds')),
beta = readRDS(paste0(var_save, 'costParameters.rds')),
num.tries = 2
) %>%
saveRDS(paste0(var_save, 'solution1.rds'))
source('code/header.R')
make_data(
assembly.count = 12,
competetor.count = 4,
distance = 10,
union = 2
)
fbl(
num.sites = 1,
assemblers = readRDS(paste0(var_save, 'assembly.rds')),
competetors = readRDS(paste0(var_save, 'competetor.rds')),
union.rate.fn = readRDS(paste0(var_save, 'unionizationRate.rds')),
beta = readRDS(paste0(var_save, 'costParameters.rds')),
num.tries = 2
) %>%
saveRDS(paste0(var_save, 'solution1.rds'))
find_best_location1(
num.sites = 1,
assemblers = readRDS(paste0(var_save, 'assembly.rds')),
competetors = readRDS(paste0(var_save, 'competetor.rds')),
union.rate.fn = readRDS(paste0(var_save, 'unionizationRate.rds')),
beta = readRDS(paste0(var_save, 'costParameters.rds')),
num.tries = 2
) %>%
saveRDS(paste0(var_save, 'solution1.rds'))
find_best_location1 <- function(num.sites, assemblers, competetors, union.rate.fn, beta, num.tries){
# Obtain the location parameter
C_bar_tri <- function(assemblers, suppliers){
euc_dist <- sum(sqrt((assemblers[1] - suppliers[1])^2 + (assemblers[2] - suppliers[2])^2))
union_rate <- union.rate.fn(suppliers[1], suppliers[2])
c_bar_tri <- beta[[1]] * euc_dist + beta[[2]] * union_rate
return(c_bar_tri)
}
# Find LSE based on the closed form we derived from Part I
Exp_N <- function(assemblers, suppliers){
lse <- t(data.frame("lse" = 1:nrow(suppliers)))
for (i in 1:nrow(suppliers)){
lse[i] <- -1*C_bar_tri(assemblers, suppliers[i,])
}
LSE <- -1*log(sum(exp(unlist(lse))))
return(LSE)
}
Minimum <- function(suppliers){
df_sup_input <- matrix(suppliers, nc = 2)
df_sup_total <- rbind(df_sup_input, as.matrix(competetors))
min <- t(data.frame("min" = 1:nrow(assemblers)))
for (a in 1:nrow(assemblers)){
min[a] <- Exp_N(assemblers[a,], df_sup_total)
}
min_sum <- sum(min)
return(min_sum)
}
opt_sol <- seq(num.tries) %>%
llply(function(l){
optim(
runif(2 * num.sites),
Minimum,
control=list(maxit=10000)
)
},
.parallel = TRUE
)
# Not sure
values <- ldply(opt_sol, function(l) data.frame(value = l$value, par = rbind(l$par)))
min_values <- filter(values, value == min(value))
values_selected <- select(min_values, -value)
nam_choi <- matrix(values_selected, nc = 2)
return(nam_choi)
}
find_best_location1(
num.sites = 1,
assemblers = readRDS(paste0(var_save, 'assembly.rds')),
competetors = readRDS(paste0(var_save, 'competetor.rds')),
union.rate.fn = readRDS(paste0(var_save, 'unionizationRate.rds')),
beta = readRDS(paste0(var_save, 'costParameters.rds')),
num.tries = 2
) %>%
saveRDS(paste0(var_save, 'solution1.rds'))
solution1
values <- ldply(solution1, function(l) data.frame(value = l$value, par = rbind(l$par)))
min_values <- filter(values, value == min(value))
values_selected <- select(min_values, -value)
nam_choi <- matrix(values_selected, nc = 2)
return(nam_choi)
values <- ldply(solution1, function(l) data.frame(value = l$value, par = rbind(l$par)))
min_values <- filter(values, value == min(value))
values_selected <- select(min_values, -value)
nam_choi <- matrix(values_selected, nc = 2)
nam_choi
