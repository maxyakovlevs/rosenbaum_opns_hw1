num.tries=2
best.run=llply(seq(num.tries), function(l) optim(runif(2*numSites), to.minimize, control=list(maxit=10)), .parallel=T) %>%
ldply(function(l) data.frame(val=l$value, par=rbind(l$par))) %>%
filter(rank(val, ties.method="first")==1)
source('header.R')
best.run=llply(seq(num.tries), function(l) optim(runif(2*numSites), to.minimize, control=list(maxit=10)), .parallel=T) %>%
ldply(function(l) data.frame(val=l$value, par=rbind(l$par))) %>%
filter(rank(val, ties.method="first")==1)
library(doParallel)
registerDoParallel(cores=20)
best.run=llply(seq(num.tries), function(l) optim(runif(2*numSites), to.minimize, control=list(maxit=10)), .parallel=T) %>%
ldply(function(l) data.frame(val=l$value, par=rbind(l$par))) %>%
filter(rank(val, ties.method="first")==1)
num.tries=2
my.vars<-load.variables()
numSites=3
assemblers=my.vars$assemblers
competetors=my.vars$competetors
unionRate=my.vars$unionRate
beta=my.vars$costParam
C.bar<-function(assembly.loc, supplier.loc){
distance=sqrt(sum((assembly.loc-supplier.loc)^2))
unions=unionRate(supplier.loc$x, supplier.loc$y)
beta$distance*distance+beta$union*unions
}
expected.Nr<-function(assembly.loc, supplier.locs){
alply(supplier.locs, 1, function(s) -C.bar(assembly.loc, s)) %>%
unlist() %>%
exp() %>%
sum() %>%
log() %>%
prod(-1)
}
to.minimize<-function(supplier.loc.list){
supplier.locs=matrix(supplier.loc.list, nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2) %>%
rbind(as.matrix(competetors))
alply(assemblers, 1, function(s) expected.Nr(s, supplier.locs)) %>%
unlist() %>%
sum()
}
#Try at several starting values
num.tries=2
registerDoParallel(cores=20)
best.run=llply(seq(num.tries), function(l) optim(runif(2*numSites), to.minimize, control=list(maxit=10)), .parallel=T) %>%
ldply(function(l) data.frame(val=l$value, par=rbind(l$par))) %>%
filter(rank(val, ties.method="first")==1)
best.run
optim(runif(2*numSites), to.minimize, control=list(maxit=10))
best.run=llply(seq(num.tries), function(l) optim(runif(2*numSites), to.minimize, control=list(maxit=10)), .parallel=T) %>%
ldply(function(l) data.frame(val=l$value, convergence=l$convergence, par=rbind(l$par))) %>%
filter(rank(val, ties.method="first")==1)
best.run
list(
value=best.run$val,
supplier.locs=select(best.run, -c(val, convergence)) %>%
matrix(nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2)
)
value=best.run$val,
convergence=best.run$convergence,
supplier.locs=select(best.run, -c(val, convergence)) %>%
matrix(nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2)
)
}
value=best.run$val,
convergence=best.run$convergence,
supplier.locs=select(best.run, -c(val, convergence)) %>%
matrix(nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2)
)
}
list(
value=best.run$val,
convergence=best.run$convergence
supplier.locs=select(best.run, -c(val, convergence)) %>%
matrix(nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2)
)
list(
value=best.run$val,
convergence=best.run$convergence,
supplier.locs=select(best.run, -c(val, convergence)) %>%
matrix(nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2)
)
55-1
55-13
y=easy.load('solution.txt')
y
my.vars<-load.variables()
plot(y)
plot(y$x, y$y)
plot(y[[3]]$x, y[[3]]$y)
plot(my.vars$assemblers$x, my.vars$assemblers$y)
plot(my.vars$competetors$x, my.vars$competetors$y)
my.vars<-load.variables()
plot(my.vars$assemblers$x, my.vars$assemblers$y)
my.vars<-load.variables()
plot(my.vars$assemblers$x, my.vars$assemblers$y)
plot(y[[3]]$x, y[[3]]$y)
plot(my.vars$competetors$x, my.vars$competetors$y)
?optim
library('fExtremes')
mean(rgev(10000, xi=0))
mean(rgev(10^6, xi=0))
mean(pmax(rgev(10^6, xi=0), rgev(10^6, xi=0)))
ln(2)+.577
l0g(2)+.577
log(2)+.577
z=matrix(pmax(rgev(10^6, xi=0), nc=2)
)
z=matrix(pmax(rgev(10^6, xi=0), nc=2))
head(z)
z=matrix(rgev(10^6, xi=0), nc=2)
head(z)
z=matrix(rgev(10^6, xi=0), nc=2)
z=z[z[,1]>z[,2],]
mean(z[,1])
mean(rgev(10^6, xi=0))
mean(rgev(10^6, xi=0,mu=1))
mean(pmax(rgev(10^6, xi=0, mu=2), rgev(10^6, xi=0)))
.577+log(exp(2)+1)
pgev(1.2, )
pgev(1.2)
pgev(1.2, xi=0)
pgev(5, xi=0)
qgev(.55, xi=0)
qgev(.95, xi=0)
qgev(.75, xi=0)
data.frame(z=rgev(10^6, xi=0, mu=1)) %>%
filter(z>qgev(.75, xi=0)) %>%
mean()
library('dplyr')
data.frame(z=rgev(10^6, xi=0, mu=1)) %>%
filter(z>qgev(.75, xi=0)) %>%
mean()
data.frame(z=rgev(10^6, xi=0, mu=1)) %>%
filter(z>qgev(.75, xi=0))
data.frame(z=rgev(10^6, xi=0, mu=1)) %>%
filter(z>qgev(.75, xi=0)) %>%
as.numeric %>%
mean()
data.frame(z=rgev(10^6, xi=0, mu=1)) %>%
filter(z>qgev(.75, xi=0)) %>%
unlist %>%
mean()
.577-ln(.75)
.577-log(.25)
.577-log(.75)
mean(pmax(rgev(10^6, xi=0, mu=2), rgev(10^6, xi=0)))
exp(8)*exp(2)
exp(10)
exp(-4)-exp(-4+2)
exp(-4)*exp(2)
exp(-4)*exp(-2)
e=4; x=2
-exp(-e)-exp(-(e-x))
exp(-e)*(1+exp(x))
e=10^2; -exp(-e)
e=10; -exp(-e)
e=20; -exp(-e)
e=-20; -exp(-e)
grep('hi', x='my nam eis hi d')
grepl('hi', x='my nam eis hi d')
sub('hi', x='my nam eis hi d')
gsub('hi', x='my nam eis hi d')
gsub('hi', x='my nam eis hi d', replacement='')
?gregexpr
gregexpr('hi', x='my nam eis hi d', replacement='')
gregexpr('hi', x='my nam eis hi d')
gregexpr(pattern='hi', text='my nam eis hi d')
gsub('hi', x='my nam eis hi d')
gregexpr('hi', x='my nam eis hi d', replacement='')
gsub('hi', x='my nam eis hi d', replacement='')
data.frame(brand=c('x', 'y', 'zToyota 9', 'Honda C3', 'car'), firm=c(rep('Toyota', 3), rep('Honda', 2)))
cars=data.frame(brand=c('x', 'y', 'zToyota 9', 'Honda C3', 'car'), firm=c(rep('Toyota', 3), rep('Honda', 2))) %>%
()
cars=data.frame(brand=c('x', 'y', 'zToyota 9', 'Honda C3', 'car'), firm=c(rep('Toyota', 3), rep('Honda', 2)))
cars
gsub(cars$brand, cars$firm, replacement='')
gsub(cars$brand[1], cars$firm, replacement='')
gsub(pattern=cars$brand[1], x=cars$firm, replacement='')
gsub(x=cars$brand[1], patterm=cars$firm, replacement='')
gsub(x=cars$brand[1], pattern=cars$firm, replacement='')
gsub(x=cars$brand, pattern=cars$firm[1], replacement='')
data.frame(brand=c('x', 'y', 'zToyota 9', 'Honda C3', 'car'), firm=c(rep('Toyota', 3), rep('Honda', 2))) %>%
ddply(c('firm', 'brand'), function(s) data.frame(clean=gsub(pattern=s$firm, x=s$brand, replacement='')))
library('plyr')
data.frame(brand=c('x', 'y', 'zToyota 9', 'Honda C3', 'car'), firm=c(rep('Toyota', 3), rep('Honda', 2))) %>%
ddply(c('firm', 'brand'), function(s) data.frame(clean=gsub(pattern=s$firm, x=s$brand, replacement='')))
gsub.vec<-function(pattern, x){
laply(seq(pattern), function(l) gsub(pattern=pattern[l], x=x[l], replacement='')))
}
gsub.vec<-function(pattern, x){
laply(seq(pattern), function(l) gsub(pattern=pattern[l], x=x[l], replacement=''))
}
car=data.frame(brand=c('x', 'y', 'zToyota 9', 'Honda C3', 'car'), firm=c(rep('Toyota', 3), rep('Honda', 2)))
gsub.vec(pattern=car$firm, x=car$brand)
data.frame(brand=c('x', 'y', 'zToyota 9', 'Honda C3', 'car'), firm=c(rep('Toyota', 3), rep('Honda', 2))) %>%
mutate(clean = gsub.vec(firm, brand))
?Vectorize
c(1, 2, 3)^5
c(1, 2, 3)^c(5, 2)
f<-function(power) c(1, 2, 3)^power
f(2)
f(c(2, 3, 4))
f(c(2, 3))
f<-function(power) c(1, 2, 3)^power
Vectorize(f)(c(2, 3))
f<-function(power) c(1, 2, 3)^power
f(2)
f(c(2, 3))
Vectorize(f)(c(2, 3))
f<-function(base, power) base^power
Vectorize(f)(c(2, 3), c(2, 3, 4, 5))
f<-function(l) gsub(pattern=pattern[l], x=x[l], replacement='')
f(c('honda 8', 'honda'))
f(data.frame(patern='honda 8', x='honda'))
f<-function(l) gsub(pattern=l$pattern, x=l$x, replacement='')
f(data.frame(patern='honda 8', x='honda'))
f<-function(l) gsub(pattern=l$pattern, x=l$x, replacement='')
f(data.frame(pattern='honda 8', x='honda'))
f(data.frame(x='honda 8', pattern='honda'))
data.frame(brand=c('x', 'y', 'zToyota 9', 'Honda C3', 'car'), firm=c(rep('Toyota', 3), rep('Honda', 2)))
data.frame(x=c('x', 'y', 'zToyota 9', 'Honda C3', 'car'), pattern=c(rep('Toyota', 3), rep('Honda', 2)))
d<-data.frame(x=c('x', 'y', 'zToyota 9', 'Honda C3', 'car'), pattern=c(rep('Toyota', 3), rep('Honda', 2)))
d
f(d)
Vectorize(f)(d)
g=Vectorize(f)
g(d)
debug(g)
g(d)
ls()
l
t <- c('tidyr', 'reshape2', 'spreadsheets', 'databases')
a <- c('gather', 'melt', 'pivot', 'fold')
o <- c('spread', 'cast', 'unpivot', 'unfold')
tao <- as.data.frame(list(tool=t, action=a, opposite=o))
tao
install.packages('tidyr')
source('header.R')
my.vars<-load.variables()
source('~/Dropbox/teaching/OPNS523/labs/OPNS_Rosenbaum_lab/solution/code/modules/getData.R')
source('header.R')
source('~/.active-rstudio-document')
source('header.R')
my.vars<-load.variables()
makeData()
head(d)
.75*162
.42*162
173+462.99
my.library <- '/Users/robertlbray/Dropbox/code/R/library'
.libPaths(my.library)
library('tidyverse')
c('reshape2', 'stringr', 'magrittr', 'plyr') %>%
walk(~library(., character.only=TRUE))
dir('modules')
dir('modules') %>%
walk(~source(paste('./modules/', ., sep="")))
var_save <- '../variables/'
assembly.count = 12
competetor.count = 4
distance = 10
union = 2
make_data(
assembly.count = 12,
competetor.count = 4,
distance = 10,
union = 2
)
make_data(
assembly.count = 12,
competetor.count = 4,
distance = 10,
union = 2
)
data_frame(
x = runif(assembly.count),
y = runif(assembly.count)
)
function(x, y) (x-1/2)^2+(y/4)^2
4
function(x, y) (x-1/2)^2+(y/4)^2
x=function(x, y) (x-1/2)^2+(y/4)^2
x
x(9, 3)
x=4
x
x(9)
{
function(x, y) (x-1/2)^2+(y/4)^2
} %>%
saveRDS(paste0(var_save, 'unionizationRate.rds'))
{function(x, y) (x-1/2)^2+(y/4)^2} %>%
saveRDS(paste0(var_save, 'unionizationRate.rds'))
readRDS(paste0(var_save, 'unionizationRate.rds'))
